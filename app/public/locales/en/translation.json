{
  "HOME": {
    "TITLE": "Energy Web DApp showcase",
    "SECTION_1_TITLE": "What is Energy Web?",
    "SECTION_1_TEXT": "Energy Web is a project that uses distributed technologies, such as blockchain, in order to promote a low-carbon, customer-centric electricity system.\nThe Energy Web Chain (EWC) was released in 2019, and most of Energy Web services are based on it.",
    "SECTION_2_TITLE": "Energy Web Dos",
    "SECTION_2_TEXT": "The heart of the Energy Web project is EW-DOS, an open source, public, digital infrastructure.\nThe whole system is built on top of three macro components, each with its purpose:",
    "SECTION_2_ITEM_1": "Trust: Energy Web Chain (EWC)",
    "SECTION_2_ITEM_2": "Utility: Services and abstraction over the blockchain",
    "SECTION_2_ITEM_3": "Toolkit: Frameworks and tools for building applications",
    "SECTION_2_IMG": "EW-Dos schema",
    "SECTION_3_TITLE": "Trust layer",
    "SECTION_3_TEXT": "The main role of the EWC is to ensure that there is consensus on the data and that all applications and smart contracts behave in a deterministic manner.\nIt is based on the Ethereum Virtual Machine (EVM), and as such allows the creation of smart contracts and respects all the Ethereum Request for Comment (ERC).\nThere is also a test-net, called Volta, used to test projects and applications before running on the main-net.\nThe consensus algorithm is Proof of Authority (POA), based on the AuRA protocol. At the cost of less decentralization, it ensures very high performance.\nThe token used on the blockchain is called Energy Web Token (EWT).",
    "SECTION_4_TEXT": "The utility layer consists of a set of EWC-based services that aim to make the entire infrastructure as accessible and inviting as possible for developers.\nAll services are paid for in EWT.\nThree broad categories of services are identified: End-user experience, Multi-platform interoperability, Application performance.\n\nSome examples are:",
    "SECTION_4_TITLE": "Utility layer",
    "SECTION_4_ITEM_1": "EWNS: Similar to DNS, it associates human readable domains to addresses on the blockchain",
    "SECTION_4_ITEM_2": "Oracles: Nodes that can be consulted with the Chainlink protocol to receive data of events external to the blockchain",
    "SECTION_4_ITEM_3": "Identity Directory: Smart contract that contains all the Decentralized IDentifiers (DID)",
    "SECTION_4_ITEM_4": "Messaging: A messaging system that uses DIDs to ensure the validity and authenticity of messages",
    "SECTION_5_TITLE": "Toolkits layer",
    "SECTION_5_TEXT": "Set of frameworks and services designed to create decentralized applications on EW-DOS.\n\nThere are two main examples:",
    "SECTION_5_ITEM_1": "EW-Origin: Used to develop applications that support the tracking, transmission and awarding of energy Attribute Certificates (EAC) according to industry standards",
    "SECTION_5_ITEM_2": "EW-Flex: Open source software for the management of Distributed Energy Resource (DER) and the operations that involve them. Ensures an easy connection to the network, submitting the offers coming from small producers to an authorized operator that acts as intermediary between the user and the grid"
  },
  "LOGIN": {
    "TITLE": "EW showcase login",
    "TEXT": "Login using the MetaMask browser extension",
    "BUTTON_METAMASK": "Login with Metamask",
    "ERROR_UNSUPPORTED_CHAIN": "{{chain}} net is not supported.\nConnect to the volta testnet",
    "NO_METAMASK": "Don't have MetaMask?",
    "WHAT_IS_EW": "What is Energy Web?",
    "CONNECT_TO_VOLTA": "Not connected to volta?",
    "CONNECT": "Connect"
  },
  "ERROR": {
    "GENERIC": "An error has occurred.\nCheck the console logs to know more",
    "NO_PROVIDER": "No ethereum provider found.\nPlease download Metamask",
    "NO_ACCOUNT": "No account connected.\nPlease connect an account",
    "REQUEST_ALREADY_SENT": "A request has already been sent.\nCheck your MetaMask extension",
    "REQUEST_REJECTED": "The connection request has been rejected",
    "ADDRESS_NOT_FOUND": "The provided address could not be found",
    "EMPTY_FIELD": "The field cannot be empty",
    "INVALID_INPUT": "The input is not valid",
    "REQUEST_UNAUTHORIZED": "Unauthorized login response.\nPlease ensure that you have the necessary role claim.",
    "MAX_LENGTH": "The field cannot be more than {{max}} characters long",
    "NOT_POSITIVE": "The value must be a positive number",
    "ONLY_INT": "Only integers are allowed"
  },
  "ENS": {
    "TITLE": "Energy web Name Service (EWNS)",
    "SECTION_1_TITLE": "What is EWNS?",
    "SECTION_1_TEXT": "The Energy Web Name Service is a distributed, open, and extensible naming system based on the Ethereum blockchain.\nSimilarly to a DNS, addresses are mapped to human readable domain names instead of hexadecimal values.\nThe default publicly available implementation allows mapping for: address, reverse addresses, content hashes, ABIdefinitions, public keys, smart contracts interfaces and so on.",
    "SECTION_2_TITLE": "How does it work?",
    "SECTION_2_TEXT": "For an end user, of course, everything is completely transparent. It is up to the DApp developer to integrate the EWNS functionality.\nThere are several libraries that already support this feature, although some manual patching may be required.\nIn any case, the procedure for solving a domain with EWNS is not very complicated:",
    "SECTION_2_ITEM_1": "Normalise and hash the name. <a>(Learn more)</a>",
    "SECTION_2_ITEM_2": "Call resolver() on the EWNS registry, passing in the output of step 1. This returns the address of the resolver responsible for the name.",
    "SECTION_2_ITEM_3": "Using the resolver interface, call addr() on the resolver address returned in step 2, passing in the hashed name calculated in step 1.  Alternatively if you are not looking up an address, call the relevant interface function to read the value of interest, e.g. text()",
    "SECTION_2_TEXT_PT_2": "To know more about how EWNS works under the hood, visit the <a>official wiki</a>",
    "SECTION_3_TITLE": "EWNS in action",
    "SECTION_3_TEXT": "Use the name resolver below to see how convenient EWNS can be.\nTry searching something with the hexadecimal address first and then use its domain name.\nEg. 0xef131ed1460626e97F34243DAc544B42eb52a472 | tend.ewc",
    "SECTION_3_LABEL_1": "Name or address",
    "SEARCH": "Search"
  },
  "EW_ACCOUNT": {
    "TRANSACTION": "Last 5 transactions",
    "BALANCE": "Balance:"
  },
  "FOOTER": {
    "LEGAL": "All names, logos, images, and brands are property of their respective owners."
  },
  "NAV": {
    "ADDRESS_COPIED": "Address copied to clipboard",
    "REFERENCES": "References"
  },
  "DID": {
    "TITLE": "Decentralized IDentifiers (DIDs)",
    "SECTION_1_TITLE": "What is a DID?",
    "SECTION_1_TEXT": "DIDs are unique identifiers that enable verifiable, decentralized digital identity. They are used to implement Self Sovereign Identity (SSI).\nThe identified subject can be anything: a person, an organization or a physical asset to name a few.\nA DID behaves like an URL, and points to a DID document, which stored on public permanent storage, like a blockchain.\nAnyone can create a new DID at any time, but the claims will continue to refer to the DID they were assigned to.",
    "SECTION_1_IMG": "A simple example of a Decentralized IDentifier (DID) with its components",
    "SECTION_2_TITLE": "A more in depth look at DIDs",
    "SECTION_2_TEXT": "A DID is, at its core, a URI composed of three parts: the scheme did:, a method identifier, and a unique, method-specific identifier specified by the DID method.\nDIDs are resolvable to DID documents, which are simple JSON-LD files. The DID document contains all the information or claims related to the subject the DID identifies and provides a set of mechanisms which enable a DID controller to prove its control over the DID. They also typically express verification methods, such as cryptographic public keys, and services relevant to interactions with the DID subject.\n\nThe controller of a DID is the entity that has the capability to make changes to a DID document. This capability is typically asserted by the control of a set of cryptographic keys.\nNote that a DID might have more than one controller, and the DID subject can be the DID controller, or one of them.\n\nSystems that support recording DIDs and returning data necessary to produce DID documents are called a verifiable data registry.\nA DID resolver is the component responsible of returning the correct DID document given its DID. This process is called DID resolution.",
    "SECTION_2_IMG": "Overview of DID architecture and the relationship of the basic components",
    "SECTION_3_TITLE": "What is the DID's purpose?",
    "SECTION_3_TEXT": "The identity subject needs an identity to be able to prove you possess certain traits or characteristics to a verifier.\nThe verifier has a number of trusted issuers from which it is willing to accept claims from.\nThe subject can ask one of these issuers to add a signed claim on its DID document, \nAlso, both issuer and verifier must be able to verify that the subject is actually the identity owner. This is achieved through DIDAuth.\nThis process can take many forms, as specified in the DID document, but a common way is through a challenge sent by the issuer or the verifier to the subject, whose public key they know thanks to the DID document, which in turn will respond by signing with the its private key, proving its identity.\n\nLet's try a real world analogy.\nYou want to buy alcohol at a bar. To do so, you must be able to prove to the barman that you are at least 18 years old. The barman in this case is the verifier.\nYou can prove your claim by showing your identity card. \nIt is issued from the government, which acts as a trusted issuer for the barman, who will check that you are actually the person pictured in the photo and will be convinced that you are old enough.",
    "SECTION_3_IMG": "Possible flow showing how an authentication interaction could use DIDs for autonomous authentication",
    "SECTION_4_TITLE": "DID in action",
    "SECTION_4_TEXT": "Energy web uses DIDs to identify users, organizations and assets. This way, information about the entity is publicly verifiable.\nFor example, you could issue a renewable energy certificate and assign it to a specific asset.\nAlso, each wallet address can correspond to a DID. This is useful to establish a role based IAM system.",
    "DID_VERIFIED": "DID verified successfully",
    "DID_LOADING": "Loading...\nWait to sign the transaction with MetaMask",
    "DID_ERROR": "Error occurred with login.\nIf you rejected the signing requests, please try again and accept.\nIf this is your first time logging in, your account needs a small amount of Volta token to create a DID Document.\nA Volta token can be obtained from the <a>Volta Faucet</a>.",
    "LOGIN": "Connect with MetaMask",
    "LOGOUT": "Log out",
    "DID_NAME": "Name",
    "ASSET_DID": "Asset DID",
    "DID_ADDRESS": "Address",
    "DID_BIRTHDATE": "Birthdate",
    "USER_DID": "User DID",
    "NO_CLAIMS": "No profile claims were found",
    "EDIT_TITLE": "Edit profile claim"
  },
  "GENERAL": {
    "CANCEL": "Cancel",
    "SUBMIT": "Submit",
    "TYPE": "Type",
    "CONDITIONS": "Conditions",
    "LABEL": "Label",
    "REQUIRED": "Required",
    "MIN_VALUE": "Min value",
    "MAX_VALUE": "Max value",
    "MIN_DATE": "Min date",
    "MAX_DATE": "Max date",
    "MIN_LENGTH": "Min length",
    "MAX_LENGTH": "Max length",
    "PATTERN": "Pattern",
    "NAME": "Name",
    "NAMESPACE": "Namespace",
    "VERSION": "Version",
    "ISSUER_TYPE": "Issuer type",
    "ISSUER_LIST": "Issuer list",
    "RESTRICTIONS_ROLE_PRECONDITIONS": "Restrictions (Role Preconditions)",
    "FIELDS": "Fields",
    "DESCRIPTION": "Description",
    "SUBORGS": "Sub-organizations",
    "ROLES": "Roles",
    "APPS": "Applications",
    "WEBSITE": "Website",
    "OTHER_JSON": "Other (JSON)",
    "ASSET_DID": "Asset's DID",
    "VOLUME": "Volume",
    "PRICE": "Price",
    "REMAINING_VOLUME": "Remaining volume",
    "BUYER": "Buyer",
    "ACTIONS": "Actions",
    "OWNER": "Owner",
    "AGGREGATOR": "Aggregator",
    "OFFER": "Offer",
    "DEMAND": "Demand",
    "MATCHES": "Matches",
    "NO_DEMANDS": "No demands found",
    "SELECT": "Select",
    "SELECTED": "Selected",
    "MATCH": "Match",
    "ID": "ID",
    "ACCEPTED": "Accepted",
    "PENDING": "Pending",
    "NO_UNDO_ACTION": "This action cannot be undone",
    "CONTRACTS_USED": "Contracts used:"
  },
  "REFERENCES": {
    "TITLE": "References",
    "SECTION_1_TITLE": "Documentation",
    "SECTION_1_ITEM_1": "Energy Web",
    "SECTION_1_ITEM_2": "Energy Web Wiki",
    "SECTION_1_ITEM_3": "Energy Web paper",
    "SECTION_1_ITEM_4": "Energy Web insights (Medium)",
    "SECTION_1_ITEM_5": "Decentralized Identifiers (W3.org)",
    "SECTION_2_TITLE": "Images",
    "SECTION_2_ITEM_1": "EW-DOS",
    "SECTION_2_ITEM_2": "DID-schema",
    "SECTION_2_ITEM_3": "DID-architecture",
    "SECTION_2_ITEM_4": "DID-use",
    "SECTION_3_TITLE": "Official DApps",
    "SECTION_3_ITEM_1": "Switchboard",
    "SECTION_3_ITEM_2": "EWNS",
    "SECTION_2_ITEM_5": "IAM-process",
    "SECTION_4_TITLE": "Report",
    "SECTION_4_ITEM_1": "Tesi"
  },
  "IAM": {
    "TITLE": "Identity and Access Management (IAM)",
    "SECTION_1_TITLE": "What is IAM?",
    "SECTION_1_TEXT": "IAM is a set of policies that ensures that only the entities with the right credentials and authorizations can access the resources.\nThe system first needs to verify the digital identity of the subject and to check the roles associated with it.\nThe operation is authorized only if the subject has the necessary roles.\nTo maintain accountability logging may be used to record every operations performed by the subject.",
    "SECTION_2_TITLE": "Decentralized IAM properties",
    "SECTION_2_TEXT": "<p>To implement a truly decentralized IAM system, some properties must be guaranteed.</p>\n\n<h5>The IAM must be censorship resistant.</h5>\n<p>It means that there is no actor in the system that has the power to selectively limit the information others have access to.\nThis aspect is important because information such as whether a permission or a key has been revoked or invalidated, or whether a permission has, instead, been granted must be publicly available.\nA blockchain fulfills these requirements by design. Additionally, the cryptographic proofs contained in the transactions allow the offline verification of the data.\nThis is why all the permissions are anchored on-chain and the description of roles are held in an ENS smart-contract.</p>\n\n<h5>Information about users and roles must be confidential.</h5>\n<p>In the Energy Web solution, no third party has the full list of users of an application. \nThis is guaranteed by the permission-granting process, for is the user who stores the claim and anchors it on chain, allowing them to prove they have been granted a certain privilege.\nAlso, because it is a private claim, the contents are provable but not disclosed.\nThe only information an observer can garner is that the user has added a claim to their DID document but not the content, origin, or nature of the claim.</p>\n<fig></fig>\n\n<h5>Finally, it must leverage a decentralized infrastructure.</h5>\n<p>This is achieved by using a combination of the Energy Web blockchain and <a>IPFS</a>, which are both peer networks.\nAn additional layer will make the IAM management even easier: a messaging service that will be provided by the service nodes of the EW-DOS.\nEach message will be signed by the sender, to avoid any malicious alteration.</p>",
    "SECTION_2_IMG": "IAM's permission-granting process",
    "SECTION_3_TITLE": "IAM in action",
    "SECTION_3_TEXT": "To show what the IAM can be used for, here is a little demo.\n\nThe structure is as follows:\nthe main \"unict\" organization, is composed of a \"test\" sub-organizationi.\n\nTwo roles belong to it: \"testrole\" and \"student\". You can enroll with your DID to both roles.\nApplications to the former need approval from a specific DID, while for the latter anyone with a \"testrole\" role can approve the request.\nRoles can have optional fields containing an arbitrary amount of data of different types.\n\nThere is also an app called \"TESTAPP\" associated with the organization, and it contains has a role, namely the \"juniordev\" role.\n\nThis kind of hierarchy ensures a fine control and flexibility over permissions within an organization."
  },
  "MARKETPLACE": {
    "TITLE": "Marketplace",
    "NO_ASSET": "No asset found that satisfy the requisites",
    "EDIT_OFFER": "Edit the offer",
    "ADD_ASSET": "Create a new asset",
    "CANCEL_OFFER": "Cancel offer",
    "CANCEL_OFFER_CONFIRM": "Do you really want to cancel your offer?",
    "CREATE_OFFER": "Submit an offer",
    "VIEW_OFFER": "Offer details",
    "CREATE_DEMAND": "Create a demand",
    "EDIT_DEMAND": "Edit the demand",
    "NO_DEMANDS": "No demands found that satisfy the requirements",
    "PROPOSE_MATCH": "Propose a new match",
    "PROPOSE_ASSET_RULE": "Select an asset and a buyer so that the respective offer and demand are compatibles.\nThe offer's remaining volume must be GREATER OR EQUAL than the demand's need.\nThe offer's price must be LESS OR EQUAL than the demand's price.",
    "DELETE_MATCH": "Delete match",
    "DELETE_MATCH_CONFIRM": "Do you really want to delete this match?",
    "ACCEPT_MATCH": "Accept match",
    "ACCEPT_MATCH_CONFIRM": "Do you really want to accept this match?",
    "CREATE_OFFER_RULE": "Register a new asset.\nIt is possible to create an offer for any of the assets you own.\nThe offer can be modified or cancelled after its creation.\nOnce a buyer has been matched to your offer, you won't be able to alter it, until the match has been deleted.",
    "CREATE_DEMAND_RULE": "It is possible to create a demand related to your address.\nThe demand can be modified or canceled after its publication.\nAn aggregator will match the demand with an appropriate offer.\nYou will be able to accept or reject the match.\nOnce an offer has been matched to your demand, you won't be able to alter it until the match has been deleted.",
    "CANCEL_DEMAND": "Cancel demand",
    "CANCEL_DEMAND_CONFIRM": "Do you really want to cancel the offer?",
    "REJECT_MATCH": "Reject match",
    "REJECT_MATCH_CONFIRM": "Do you really want to reject the match?"
  }
}
